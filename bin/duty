#!/usr/bin/env ruby

module Duty
  class CLI
    def initialize(args)
      @args = args
    end

    def exec
      if @args.any?
        if @args[0] == 'new-feature'
          if @args[1]
            write FeatureBranchSuccessMessage.new(@args[1]).to_s
          else
            write FeatureBranchExplainMessage.new.to_s
          end
        else
          write InvalidCommandMessage.new(@args).to_s
        end
      else
        write UsageMessage.new.to_s
      end
    end

    private

    class Message
      def initialize(string)
        @string = string
      end

      def to_s
        @string
      end
    end

    class FeatureBranchSuccessMessage < Message
      def initialize(name)
        super("What just happend:\n\n#{bullet} Checked out `master` branch\n#{bullet} Created new feature branch `feature\/#{name}`\n#{bullet} Checked out new feature branch `feature\/#{name}`\n#{bullet} Pushed new feature branch `feature\/#{name}` to `origin`")
      end

      private

      def bullet
        "\u2022".encode('utf-8')
      end
    end

    class InvalidCommandMessage < Message
      def initialize(args)
        super("duty: `#{args.join(' ')}` is not a duty command")
      end
    end

    class FeatureBranchExplainMessage < Message
      def initialize
        super("Creates a new feature branch\n\nusage: duty new-feature <name>")
      end
    end

    class UsageMessage < Message
      def initialize
        super("usage: duty <command> [<args>]\n\nCommands:\n\nnew-feature\tCreates a new feature branch")
      end
    end

    def write(msg)
      $stdout.puts msg
    end
  end
end

Duty::CLI.new(ARGV).exec
